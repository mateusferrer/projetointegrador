package sistema.visao.igreja;import java.util.List;import javax.annotation.Resource;import javax.faces.model.SelectItem;import javax.inject.Inject;import javax.inject.Named;import org.springframework.context.annotation.Scope;import sistema.infra.formularios.GListaDetalheFrm;import sistema.negocio.dominio.Cidade;import sistema.negocio.dominio.Estado;import sistema.negocio.dominio.Igreja;import sistema.negocio.dominio.TipoIgreja;import com.forj.cirrus.infra.exceptions.NegocioException;import com.forj.cirrus.infra.spring.Escopo;import com.forj.cirrus.negocio.aplicativo.DominioBean;import com.forj.cirrus.util.Cirrus;/** * Gerenciador de formulários GUI JSF de manutenção <b>Igreja</b>. *  * @author Lucas Francisquini * @version 1.0 - 26/11/2015 * @since 26/11/2015 */@Named@Scope(Escopo.SESSION)public class IgrejaFrm extends GListaDetalheFrm<Igreja> {	/** Armazena uma coleção de estados. **/	private List<Estado> estados;	/** Armazena uma coleção de cidades. **/	private List<Cidade> cidades;	/** Armazena o estado selecionado. **/	private Estado estadoSelecionado;	/** Armazena a cidade selecionada. **/	private Cidade cidadeSelecionada;	/** Armazena o gerenciador dos processos de negócio. **/	@Resource(name = Cirrus.FACADE)	private DominioBean<Igreja> bean;	/** Armazena o gerenciador dos processos de negócio. **/	@Inject	private DominioBean<Estado> estadoBean;	/** Armazena o gerenciador dos processos de negócio. **/	@Inject	private DominioBean<Cidade> cidadeBean;	/** Armazena opções de seleção para tipo de igreja. **/	private static final SelectItem[] tipoIgreja = {			new SelectItem(TipoIgreja.MATRIZ,					TipoIgreja.getInstance(TipoIgreja.MATRIZ)),			new SelectItem(TipoIgreja.FILIAL,					TipoIgreja.getInstance(TipoIgreja.FILIAL)) };	/** Contrutor padrão. **/	public IgrejaFrm() {		titulo = "Manutenção de Igreja";		dominio = new Igreja();	}	/** {@inheritDoc} */	@Override	public void entrar() {		super.entrar();		try {			estados = estadoBean.get(Estado.TODOS);		} catch (NegocioException e) {			gerarErrosRia(e);		}	}	/** {@inheritDoc} */	@Override	public void pesquisar() {		try {			colecao = bean.get(Igreja.TODOS);		} catch (NegocioException e) {			gerarErrosRia(e);		}	}	/** Busca as cidades com base no id do estado selecionado. */	public void buscarCidade() {	}	public DominioBean<Estado> getEstadoBean() {		return estadoBean;	}	public DominioBean<Cidade> getCidadeBean() {		return cidadeBean;	}	public Estado getEstadoSelecionado() {		return estadoSelecionado;	}	public void setEstadoSelecionado(Estado estadoSelecionado) {		this.estadoSelecionado = estadoSelecionado;	}	public List<Estado> getEstados() {		return estados;	}	public List<Cidade> getCidades() {		return cidades;	}	public Cidade getCidadeSelecionada() {		return cidadeSelecionada;	}}